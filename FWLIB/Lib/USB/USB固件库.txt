：该层管理使用USB IP 硬件和USB 标准协议的直接传输。USB 库内核遵从USB2.0
标准并和标准的STM32F10xxx 固件库分离。
USB 库内核模块：
Usb_type.h---------库内核用到的数据类型，本文件用于保证USB 库的独立性。
Usb_reg (.h,.c)----硬件抽象层
Usb_int.c----------正确传输中断服务程序
Usb_init (.h,.c)---USB 初始化
Usb_core (.h,.c)---USB 协议管理（服从USB2.0 规范的第九章）
Usb_mem (.h,.c)----数据传输管理（从包存储器区域发出的或者发往包存储器区域的）
Usb_def.h----------USB 定义

usb_type.h：
该文件提供了库中使用的主要数据类型，这些数据类型和使用的微控制器家族有关。
注意：USB 库中类型的定义和STM32F10xxx 固件库中相同， 这保证了整个代码的一致性。

Usb_reg (.c,.h)：
Usb_reg 模块实现了硬件抽象层，它提供了访问USB 宏单元寄存器的一组基本函数。
注意：可用函数有两种调用方式：
― 作为宏：_调用方式是：函数名（参数 1，2…）
― 作为子程序：调用方式是：函数名（参数 1，2…）

usb_int (.c , .h)：
usb_int 模块处理正确的传输中断服务程序，提供了USB 协议事件和库内核之间的连接。
The STM32F10xxx USB 外设提供两种正确传输例程：
1）低优先级中断：由 CTR_LP()函数管理，在控制，中断，批量模式下使用（单缓存模式）。
2）高优先级中断：由 CTR_HP()函数管理，在快速传输方式（如同步，批量模式）（双缓存模式）

usb_core (.c , .h)：
usb_core 模块是库的内核，实现了USB 2.0 规范中第九章描述的所有功能。
可用的子例程覆盖了和控制端点（EP0）有关的USB 标准请求处理以及为完成列举过程所需代码的提供。
为了处理设置事务的不同阶段，内核实现了一个状态机。
USB 内核模块还利用结构体User_Standard_Requests 实现了标准请求和用户实现之间的动态接口。
只要需要，USB 内核可以将一些类专用的请求和总线事件分配给用户程序处理。用户处理过程在
Device_Property 结构中给出。