USB配置流程
1-获取设备信息（REQUEST_STANDARD->USB_REQUEST_GET_DESCRIPTOR->REQUEST_TO_DEVICE）:设备到主机
2-reset
3-设置地址（REQUEST_STANDARD->USB_REQUEST_SET_ADDRESS）:主机到设备
4-获取设备信息（REQUEST_STANDARD->USB_REQUEST_GET_DESCRIPTOR->REQUEST_TO_DEVICE）:设备到主机
5-请求设备配置信息（REQUEST_STANDARD->USB_REQUEST_GET_CONFIGURATION）:设备到主机

USB枚举过程：

A-枚举过程中，第一个来回的详细分析
	检测到设备，主机发总线复位。这个复位与USB上电复位和系统复位是不同的。这个是SIE根据总线状态通知用户的一种复位。设备产生复位中断，如何处理由设备固件程序决定。
	主机发起第一个控制传输：
	（1）主机SETUP包（发往地址0端点0）、主机数据包（请求设备描述符）、设备握手包ACK。
		设备产生端点0数据输出中断，固件程序要根据数据包中的主机要求做好准备，这里是在端点0输入缓冲区准备好设备描述符。
	（2）数据过程，主机先发一个IN令牌包、设备发一个数据包（这个数据已经准备好，SIE收到IN令牌后，直接送到总线上，用户此时不干预）、主机发ACK包。

		此时SIE产生端点0数据输入中断，表明主机已经取走了设备所准备的数据，用户也可以在该中断处理程序中作自己的处理。(SIE指串行接口引擎,是所有USB控制器内部的“核
		心”.SIE负责处理底层协议,如填充位,CRC生成和校验,并可发出错误报告.SIE的主要任务是将低级信号转换成字节,以供控制器使用)
		此时，主机只接受一次数据，最少8个字节。如果用户数据没有发完，又在控制端点输入缓冲区，准备了数据，主机也不理会。
	（3）状态过程：主机发OUT包（通知设备要输出）、主机发0字节状态数据包（这个是0字节，表明自己收到设备描述符）、设备发握手ACK包。

	此时设备不会产生端点0数据输出中断，此时没有数据。
B-枚举过程中，第二个来回：设置地址。
	第一个来回成功以后，主机再次复位总线。进入地址设置控制传输阶段。
	（1）主机SETUP包（发往地址0端点0）、主机数据包（请求设置地址）、设备握手包ACK。所以SETUP包后面都会跟一个表明主机SETUP目的的数据包，要么GET，要么SET。
		设备产生端点0数据输出中断，固件程序要根据数据包中的主机要求做好准备，这里是在根据主机发来的地址写入自己的地址控制寄存器。
	（2）数据过程，本次传输没有数据。
	（3）状态过程：主机发IN包（通知设备要返回数据）、设备发0字节状态数据包（表明地址设置已经成功）、主机发握手ACK包（地址设置已经生效）。
	此时设备不会产生端点0数据输入中断，此时没有数据。
C-枚举过程中，第三个来回：主机使用新地址获取完整的设备描述符。
	主机采用新地址发起第一个控制传输：
	（1）主机SETUP包（发往新的地址端点0）、主机数据包（请求设备描述符）、设备握手包ACK。
		设备产生端点0数据输出中断，固件程序要根据数据包中的主机要求做好准备，这里是在端点0输入缓冲区准备好设备描述符。
	（2）数据过程，主机先发一个IN令牌包、设备发一个数据包（这个数据已经准备好，SIE收到IN令牌后，直接送到总线上，用户此时不干预）、主机发ACK包。
		此时SIE产生端点0数据输入中断，表明主机已经取走了设备所准备的数据，用户可以该中断处理程序中要做如下处理：如果一次没有将描述符送完，要再次将剩下的内容填充端点0输入缓冲区。
		第二次数据传输：主机再发一个IN令牌包、设备发一个数据包、主机发ACK包。此时SIE再次产生端点0数据输入中断，如果数据已经发完了。这里就不处理了。进入状态过程。
	（3）状态过程：主机发OUT包（通知设备要输出）、主机发0字节状态数据包（表明自己收到设备描述符）、设备发握手ACK包。
	
	接下来获取配置描述符、配置集合、字符串描述符、报告描述符的过程差不多，这里就不再叙述了。
	
	
USB插入时的动作流程：
1-供电
2-复位
3-获取Device Descriptor
4-复位( 可选)
5-分配地址
6-获取Device Descriptor
7-获取Configuration Descriptor
8-获取String Descriptor ( 可选)
9-配置

STANDARD_REQUESTS（标准请求值）
	GET_STATUS			= 	0,		//用来返回特定接收者的状态
	CLEAR_FEATURE		=	1,		//用来清除或禁止接收者的某些特性
	SET_FEATURE			=	3,		//用来启用或激活命令接收者的某些特性
	SET_ADDRESS			=	5,		//用来给设备分配地址
	GET_DESCRIPTOR		=	6,		//用于主机获取设备的特定描述符
	SET_DESCRIPTOR		=	7,		//修改设备中有关的描述符，或者增加新的描述符
	GET_CONFIGURATION	=	8,		//用于主机获取设备当前设备的配置值（注同上面的不同）
	SET_CONFIGURATION	=	9,		//用于主机指示设备采用的要求的配置
	GET_INTERFACE		=	10,		//用于获取当前某个接口描述符编号
	SET_INTERFACE		=	11,		//用于主机要求设备用某个描述符来描述接口
	SYNCH_FRAME 		= 	12		//用于设备设置和报告一个端点的同步帧

USB文件结构说明：（Virtual_COM_Port）
hw_config.c	（用于 USB硬件配置）
usb_desc.c	（具体设备的相关描述符定义和处理）
usb_istr.c	（直接处理USB中断）
usb_prop.c	（用于上层协议处理，比如 HID协议，大容量存储设备协议）
usb_pwr.c	（用于USB连接、断开操作）
usb_regs.c	（用于寄存器操作）
usb_mem.c	（用于缓冲区操作）
usb_core.c	（USB总线数据处理的核心文件）




